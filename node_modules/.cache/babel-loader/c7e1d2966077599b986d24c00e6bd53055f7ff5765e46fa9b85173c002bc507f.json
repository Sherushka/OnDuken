{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { authService } from \"../services/auth\";\nconst initialState = {\n  user: JSON.parse(localStorage.getItem(\"user\")),\n  isError: false,\n  isLoading: false,\n  isSuccess: false,\n  message: \"\"\n};\nexport const login = createAsyncThunk(\"auth/login\", async (userData, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    return authService.login(userData);\n  } catch (err) {\n    console.log(err);\n    return rejectWithValue(err);\n  }\n});\nexport const register = createAsyncThunk(\"auth/register\", async (userData, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    return authService.register(userData);\n  } catch (err) {\n    console.log(err);\n    return rejectWithValue(err);\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  try {\n    return authService.logout();\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isError = false;\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = \"Successfully logged in\";\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = \"Could not log in\";\n    }).addCase(logout.pending, state => {\n      state.isLoading = true;\n    }).addCase(logout.fulfilled, state => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = \"Successfully logged out\";\n      state.user = null;\n    }).addCase(logout.rejected, state => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = \"Could not log out\";\n    }).addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = \"Successfully registered\";\n      state.user = action.payload;\n    }).addCase(register.rejected, state => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = \"Could not register\";\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","authService","initialState","user","JSON","parse","localStorage","getItem","isError","isLoading","isSuccess","message","login","userData","rejectWithValue","err","console","log","register","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/Пользователь/Projects/advancedno/src/redux/slices/auth.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { authService } from \"../services/auth\";\n\nconst initialState = {\n    user: JSON.parse(localStorage.getItem(\"user\")),\n    isError: false,\n    isLoading: false,\n    isSuccess: false,\n    message: \"\",\n}\n\nexport const login = createAsyncThunk(\n    \"auth/login\",\n    async (userData, { rejectWithValue }) => {\n        try {\n            return authService.login(userData);\n        } catch (err) {\n            console.log(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const register = createAsyncThunk(\n    \"auth/register\",\n    async (\n        userData,\n        { rejectWithValue }\n    ) => {\n        try {\n            return authService.register(userData);\n        } catch (err) {\n            console.log(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n    try {\n        return authService.logout();\n    } catch (err) {\n        console.log(err);\n        return err;\n    }\n});\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        reset: (state) => {\n            state.isError = false;\n            state.isLoading = false;\n            state.isSuccess = false;\n            state.message = \"\";\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(login.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.isSuccess = true;\n                state.message = \"Successfully logged in\";\n                state.user = action.payload;\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.isLoading = false;\n                state.isError = true;\n                state.message = \"Could not log in\";\n            })\n            .addCase(logout.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.isLoading = false;\n                state.isSuccess = true;\n                state.message = \"Successfully logged out\";\n                state.user = null;\n            })\n            .addCase(logout.rejected, (state) => {\n                state.isLoading = false;\n                state.isError = true;\n                state.message = \"Could not log out\";\n            })\n            .addCase(register.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(register.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.isSuccess = true;\n                state.message = \"Successfully registered\";\n                state.user = action.payload;\n            })\n            .addCase(register.rejected, (state) => {\n                state.isLoading = false;\n                state.isError = true;\n                state.message = \"Could not register\";\n            });\n    },\n});\n\nexport const { reset } = authSlice.actions;\n\nexport default authSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}